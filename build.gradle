plugins {
    id 'com.scuilion.syntastic' version '0.3.8'
    id 'java'
}

apply plugin: GreetingPlugin
apply from: 'about.gradle'

description 'gradle practice'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    testCompile 'junit:junit:4.+'
}

// since we follow standard directory layout
// there no need to define srcDir
// sourceSets {
//     main.java.srcDir 'src/main/java'
//     test.java.srcDir 'src/test/java'
// }

jar {
    from configurations.compile.collect { zipTree it }
    manifest.attributes 'Main-Class': 'com.daniel1147.gradleTutorial.Main'
}

task hello {
    group 'Tutorial 1'
    description 'Greets you.'

    // configuration phase
    // println 'hello from configuration phase'
    ext.greetingMsg = 'Hey, how\'s it going?'

    // execution phase
    // doLast { println 'hello' }
    // doLast { println 'hello again' }
    // doFirst { println 'start hello' }
    doLast { println "Greeting: $greetingMsg" }
}

task run(type: JavaExec, dependsOn: classes) {
    group 'Tutorial 3'
    main 'com.daniel1147.gradleTutorial.Main'
    classpath sourceSets.main.runtimeClasspath
    args 'Hello', 'World', '!'
}

task runJar(type: Exec, dependsOn: jar) {
    group 'Tutorial 3'
    // java -jar build/libs/project.jar Hello World
    executable 'java'
    args '-jar', "$jar.archivePath", 'Hello', 'World'
}

task optional {
    group 'Tutorial 3'
    // onlyIf {true}
    // println 'optional on configuration phase'
    doLast {
        println 'optional enabled!'
    }
}

optional.enabled = false

task writeGreeting {
    group 'Tutorial 3'
    outputs.file 'greeting.txt'
    doLast {
        file('greeting.txt').text = 'Hello, everyone.'
    }
}

task upper(group: 'Tutorial 1') {
    doLast {
        String words = 'this is a sentence of upper case.'
        println 'Original: ' + words
        println 'Result: ' + words.toUpperCase()
    }
}

task count(group: 'Tutorial Task') {
    doLast {
        4.times {
            println "$it "
        }
    }
}

task groovyJDK(group: 'Tutorial Task') {
    doLast {
        String myName = 'Daniel'
        myName.each() {
            println "$it"
        }
    }
}

task lib1(group: 'Tutorial Task') {
    doLast {
        group 'Tutorial Task'
        println 'this is lib1'
    }
}

task lib2(group: 'Tutorial Task') {
    doLast {
        group 'Tutorial Task'
        println 'this is lib2'
    }
}

task lib3(group: 'Tutorial Task') {
    doLast {
        group 'Tutorial Task'
        println 'this is lib3'
    }
}

task taskA(group: 'Tutorial Task') {
    doLast {
        println 'this is taskA'
    }
}

taskA.dependsOn {
    tasks.findAll {
        task -> task.name.startsWith 'lib'
    }
}

task copy(type: Copy, group: 'Tutorial Task') {
    description 'Copies the resource directory to the target directory.'
    from 'resources'
    into 'target'
    include('**/*.txt', '**/*.xml', '**/*.properties')
    doLast {
        println("description applied")
    }
}

task taskException(group: 'Tutorial Task') {
    doLast {
        println '1'
        throw new StopExecutionException()
        println '2'
    }
}

greeting {
    target = 'Gradle'
    message = 'Yo!'
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.extensions.create('greeting', GreetingPluginExtension)

        // project.task('pluginGreeting') {
        //     group 'Tutorial Plugin'
        //     description 'a custom plugin!'
        // } << {
        //     println "$project.greeting.message $project.greeting.target"
        // }
        project.task('pluginGreeting') {
            group 'Tutorial Plugin'
            description 'a custom plugin!'
            doLast {
                println "$project.greeting.message $project.greeting.target"
            }
        }
    }
}

class GreetingPluginExtension {
    String message
    String target
}

task task1(group: 'Build Simulation') {
    doLast {
        println 'compiling source'
    }
}

task task2(group: 'Build Simulation', dependsOn: task1) {
    doLast {
        println 'compiling unit tests'
    }
}

task task3(group: 'Build Simulation', dependsOn: [task1, task2]) {
    doLast {
        println 'running unit tests'
    }
}

task task4(group: 'Build Simulation', dependsOn: [task1, task3]) {
    doLast {
        println 'building the distribution'
    }
}

test {
    exclude '**/Test1.class'
}
