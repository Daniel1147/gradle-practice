repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: GreetingPlugin

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    testCompile 'junit:junit:4.+'
}

sourceSets {
    main.java.srcDir 'src/main'
    test.java.srcDir 'src/test'
}

jar {
    from configurations.compile.collect { zipTree it }
    manifest.attributes 'Main-Class': 'com.daniel1147.gradleTutorial.Main'
}

task hello {
    group 'greeting'
    description 'Greets you.'

    // configuration phase
    // println 'hello from configuration phase'
    ext.greeting = 'Hey, how\'s it going?'

    // execution phase
    // doLast { println 'hello' }
    // doLast { println 'hello again' }
    // doFirst { println 'start hello' }
    doLast { println "Greeting: $greeting" }
}

task run(type: JavaExec, dependsOn: classes) {
    main 'com.daniel1147.gradleTutorial.Main'
    classpath sourceSets.main.runtimeClasspath
    args 'Hello', 'World', '!'
}

task runJar(type: Exec, dependsOn: jar) {
    // java -jar build/libs/project.jar Hello World
    executable 'java'
    args '-jar', "$jar.archivePath", 'Hello', 'World'
}

task optional {
    // onlyIf {true}
    // println 'optional on configuration phase'
} << {
    println 'optional enabled!'
}

optional.enabled = false

task writeGreeting {
    outputs.file 'greeting.txt'
} << {
    file('greeting.txt').text = 'Hello, everyone.'
}

task upper << {
    String words = 'this is a sentence of upper case.'
    println 'Original: ' + words
    println 'Result: ' + words.toUpperCase()
}

task count << {
    4.times {
        println "$it "
    }
}

task groovyJDK << {
    String myName = 'Daniel'
    myName.each() {
        println "$it"
    }
}

task lib1 << {
    println 'this is lib1'
}

task lib2 << {
    println 'this is lib1'
}

task lib3 << {
    println 'this is lib1'
}

task taskA << {
    println 'this is taskA'
}

taskA.dependsOn {
    tasks.findAll {
        task -> task.name.startsWith 'lib'
    }
}

task copy(type: Copy) {
   description 'Copies the resource directory to the target directory.'
   from 'resources'
   into 'target'
   include('**/*.txt', '**/*.xml', '**/*.properties')
} << {
   println("description applied")
}

task taskException << {
    println '1'
    throw new StopExecutionException()
    println '2'
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('greetingsFromPlugin') {
            group 'My Plugin'
            description 'a custom plugin!'
        } << {
            println 'Welcome to GreetingPlugin!'
        }
    }
}
